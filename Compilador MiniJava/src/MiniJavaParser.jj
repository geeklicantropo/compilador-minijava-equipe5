options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)

TOKEN: {
	< EQUALS : "="> |
	< NEGATION : "!">|
	< LBRACE : "{"> |
	< RBRACE : "}"> |
	< P_OPEN : "("> |
	< P_CLOSE : ")"> |
	< B_OPEN : "["> |
	< B_CLOSE : "]"> |
	< POINT : "."> |
	< COMMA: ","> |
	< CLOSER : ";"> |
	< IF : "if"> |
	< ELSE : "else"> |
	< WHILE : "while"> |
	< EXTENDS : "extends"> |
	< RETURN : "return"> |
	< CLASS: "class"> |
	< PUBLIC : "public"> |
	< STATIC : "static"> |	
	< VOID : "void"> |
	< MAIN : "main"> |
	< STRING : "String"> |
	< INT : "int"> |
	< ARRAY_MODIFIER : "[]"> |
	< LENGTH : "length"> |
	< BOOLEAN: "boolean"> |
	< TRUE:"true"> |
	< FALSE: "false"> |
	< THIS: "this"> |
	< NEW : "new"> |
	< END : "$"> |
	< OP : "&&"|"<"|"+"|"-"|"/"|"*" > |
	< INTEGER_LITERAL : (< DIGIT >)+ > |
	< #DIGIT : [ "0"-"9" ] > |
	< ID : (< LIT >)(< LIT >|< DIGIT >)* > |
	< #LIT : ["a"-"z"]|["A"-"Z"]|"_"> 
}

SKIP: {
    "\t"
  | "\n"
  | " "
  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~[])* "*/">
}

Program Program() :
{
	MainClass mainClass;
	ClassDecl classDecl;
	ClassDeclList cdList = new ClassDeclList();

}
{
    MainClass() ( ClassDecl() )* <EOF>
}

void MainClass() :
{}
{
  "class" <ID> "{" "public" "static" "void" "main" "(" "String" "[]" <ID> ")" "{" Statement() "}" "}"
}

void ClassDecl() : //precisamos dar um lookahead até ver um "{" ou o comeco de um extends
{}
{
  LOOKAHEAD(3) "class" <ID> "{" ( VarDecl() )* ( MethodDecl() )* "}"
  |  "class" <ID> "extends" <ID> "{" ( VarDecl() )* ( MethodDecl() )* "}"
}

void VarDecl() :
{}
{
  Type() <ID> ";"
}

void MethodDecl() :
{}
{
  "public" Type() <ID> "(" FormalList() ")" "{" ( LOOKAHEAD(2) VarDecl() )* ( Statement() )* "return" Exp() ";" "}"
}

void FormalList() :
{}
{
  ( Type() <ID> ( FormalRest() )* )?
}

void FormalRest() :
{}
{
  "," Type() <ID>
}

void Type() : //precisamos dar um lookahead até ver um "[]"
{}
{
    LOOKAHEAD(2)  "int" "[]"
  | "int"
  | "boolean"
  | <ID>
}

void Statement() : //precisamos dar um lookahead até ver um "=" ou "["
{}
{
    "{" ( Statement() )* "}"
  | "if" "(" Exp() ")" Statement() "else" Statement()
  | "while" "(" Exp() ")" Statement()
  | "System.out.println" "(" Exp() ")" ";"
  | LOOKAHEAD(2)  <ID> "=" Exp() ";"
  | <ID> "[" Exp() "]" "=" Exp() ";"
}

void Exp0() :
{}
{
    < OP > Exp()
  | "[" Exp() "]"
  | LOOKAHEAD(2)  "." "length"
  | "." < ID > "(" ExpList() ")"
}

void Exp() :
{}
{ 
    <INTEGER_LITERAL> [ LOOKAHEAD(2) Exp0() ]
  | "true" [ LOOKAHEAD(2) Exp0() ]
  | "false" [ LOOKAHEAD(2) Exp0() ]
  | <ID> [ LOOKAHEAD(2) Exp0()]
  | "this" [ LOOKAHEAD(2) Exp0() ]
  | LOOKAHEAD(2)  "new" "int" "[" Exp() "]" [ LOOKAHEAD(2) Exp0() ]
  | "new" <ID> "("")" [ LOOKAHEAD(2) Exp0() ]
  | "!" Exp() [ LOOKAHEAD(2) Exp0() ]
  | "(" Exp() ")" [ LOOKAHEAD(2) Exp0() ]
}

void ExpList() :
{}
{
  ( Exp() ( ExpRest() )* )?
}

void ExpRest() :
{}
{
  "," Exp()
}